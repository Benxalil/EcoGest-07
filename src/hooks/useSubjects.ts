import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useUserRole } from './useUserRole';
import { useToast } from '@/hooks/use-toast';

export interface Subject {
  id: string;
  name: string;
  abbreviation?: string;
  class_id: string;
  school_id: string;
  coefficient?: number;
  hours_per_week?: number;
  color?: string;
  max_score?: number;
  created_at?: string;
  updated_at?: string;
}

export interface CreateSubjectData {
  name: string;
  abbreviation?: string;
  class_id: string;
  coefficient?: number;
  hours_per_week?: number;
  color?: string;
  max_score?: number;
}

export const useSubjects = (classId?: string, teacherId?: string | null) => {
  const [subjects, setSubjects] = useState<Subject[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { userProfile } = useUserRole();
  const { toast } = useToast();

  const fetchSubjects = async () => {
    if (!userProfile?.schoolId) {
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      
      console.log('üîç useSubjects - Params:', { classId, teacherId, schoolId: userProfile.schoolId });
      
      // Si teacherId est fourni, filtrer par les mati√®res de l'enseignant
      if (teacherId) {
        console.log('üë®‚Äçüè´ Filtering by teacher:', teacherId);
        
        // TOUJOURS filtrer par classe pour un enseignant
        if (!classId) {
          console.log('‚ö†Ô∏è classId is required when filtering by teacher');
          setSubjects([]);
          setLoading(false);
          return;
        }
        
        // R√©cup√©rer les mati√®res via les emplois du temps (schedules)
        // Utiliser √† la fois subject (nom) et subject_id
        const { data: schedules, error: schedError } = await supabase
          .from('schedules')
          .select('subject, subject_id')
          .eq('teacher_id', teacherId)
          .eq('school_id', userProfile.schoolId)
          .eq('class_id', classId);  // TOUJOURS filtrer par classe
        
        console.log('üìÖ Schedules found:', schedules);

        if (schedError) throw schedError;

        // Extraire les IDs uniques ET les noms de mati√®res
        const subjectIds = Array.from(
          new Set(schedules?.map(s => s.subject_id).filter(Boolean))
        ) || [];
        const subjectNames = Array.from(
          new Set(schedules?.map(s => s.subject).filter(Boolean))
        ) || [];
        
        console.log('üîë Subject IDs:', subjectIds);
        console.log('üìù Subject Names:', subjectNames);
        
        if (subjectIds.length === 0 && subjectNames.length === 0) {
          console.log('‚ö†Ô∏è No subjects found for this teacher in this class');
          setSubjects([]);
          setLoading(false);
          return;
        }

        // Construire la requ√™te combin√©e pour chercher par ID OU par nom
        let query = supabase
          .from('subjects')
          .select('*')
          .eq('school_id', userProfile.schoolId)
          .eq('class_id', classId);

        // Construire la clause OR pour chercher soit par ID soit par nom
        const orConditions: string[] = [];
        
        if (subjectIds.length > 0) {
          orConditions.push(`id.in.(${subjectIds.join(',')})`);
        }
        
        if (subjectNames.length > 0) {
          const escapedNames = subjectNames.map(name => `"${name}"`);
          orConditions.push(`name.in.(${escapedNames.join(',')})`);
        }
        
        if (orConditions.length > 0) {
          query = query.or(orConditions.join(','));
        }

        const { data, error } = await query.order('name');
        
        console.log('‚úÖ Final subjects:', data);
        
        if (error) {
          if (error.code === 'PGRST116' || error.message.includes('relation "subjects" does not exist')) {
            setSubjects([]);
            return;
          }
          throw error;
        }
        
        setSubjects(data || []);
      } else {
        // Requ√™te normale sans filtre enseignant
        const query = supabase
          .from('subjects')
          .select('*')
          .eq('school_id', userProfile.schoolId);

        if (classId) {
          query.eq('class_id', classId);
        }

        const { data, error } = await query.order('name');

        if (error) {
          // Si la table n'existe pas, retourner un tableau vide
          if (error.code === 'PGRST116' || error.message.includes('relation "subjects" does not exist')) {
            setSubjects([]);
            return;
          }
          throw error;
        }
        
        setSubjects(data || []);
      }
    } catch (err) {
      console.error('Erreur lors de la r√©cup√©ration des mati√®res:', err);
      setError(err instanceof Error ? err.message : 'Erreur lors de la r√©cup√©ration des mati√®res');
      // En cas d'erreur, retourner un tableau vide pour √©viter de casser l'interface
      setSubjects([]);
    } finally {
      setLoading(false);
    }
  };

  const createSubject = async (subjectData: CreateSubjectData) => {
    if (!userProfile?.schoolId) return false;

    try {
      const { error } = await supabase
        .from('subjects')
        .insert({
          name: subjectData.name,
          abbreviation: subjectData.abbreviation || '',
          code: subjectData.abbreviation || subjectData.name.substring(0, 3).toUpperCase(),
          class_id: subjectData.class_id,
          school_id: userProfile.schoolId,
          coefficient: subjectData.coefficient || 1,
          hours_per_week: subjectData.hours_per_week || 1,
          color: subjectData.color || '#3B82F6',
          max_score: subjectData.max_score || 20
        });

      if (error) {
        console.error('Erreur lors de la cr√©ation de la mati√®re:', error);
        throw error;
      }

      await fetchSubjects();

      toast({
        title: "Mati√®re ajout√©e avec succ√®s",
        description: `La mati√®re ${subjectData.name} a √©t√© ajout√©e.`,
      });

      return true;
    } catch (err: any) {
      console.error('Erreur lors de la cr√©ation de la mati√®re:', err);
      
      let errorMessage = "Une erreur est survenue lors de la cr√©ation de la mati√®re.";
      
      if (err?.code === '23505') {
        errorMessage = "Cette mati√®re existe d√©j√† dans cette classe.";
      } else if (err?.code === '23503') {
        errorMessage = "Classe ou √©cole introuvable.";
      } else if (err?.code === '23502') {
        errorMessage = "Donn√©es manquantes pour cr√©er la mati√®re.";
      } else if (err?.message) {
        errorMessage = err.message;
      }
      
      toast({
        title: "Erreur lors de la cr√©ation",
        description: errorMessage,
        variant: "destructive",
      });
      return false;
    }
  };

  const updateSubject = async (id: string, subjectData: Partial<CreateSubjectData>) => {
    if (!userProfile?.schoolId) return false;

    try {
      // Pr√©parer les donn√©es de mise √† jour avec le code
      const updateData = {
        ...subjectData,
        code: subjectData.abbreviation || (subjectData.name ? subjectData.name.substring(0, 3).toUpperCase() : undefined)
      };

      const { error } = await supabase
        .from('subjects')
        .update(updateData)
        .eq('id', id)
        .eq('school_id', userProfile.schoolId);

      if (error) throw error;

      await fetchSubjects();

      // √âmettre un √©v√©nement pour notifier que les mati√®res ont √©t√© mises √† jour
      window.dispatchEvent(new CustomEvent('matieresUpdated'));
      localStorage.setItem('matieresUpdated', Date.now().toString());

      toast({
        title: "Mati√®re mise √† jour",
        description: "La mati√®re a √©t√© mise √† jour avec succ√®s.",
      });

      return true;
    } catch (err) {
      console.error('Erreur lors de la mise √† jour de la mati√®re:', err);
      toast({
        title: "Erreur lors de la mise √† jour",
        description: err instanceof Error ? err.message : "Une erreur est survenue lors de la mise √† jour.",
        variant: "destructive",
      });
      return false;
    }
  };

  const deleteSubject = async (id: string) => {
    if (!userProfile?.schoolId) return false;

    try {
      const { error } = await supabase
        .from('subjects')
        .delete()
        .eq('id', id)
        .eq('school_id', userProfile.schoolId);

      if (error) throw error;

      await fetchSubjects();

      toast({
        title: "Mati√®re supprim√©e",
        description: "La mati√®re a √©t√© supprim√©e avec succ√®s.",
      });

      return true;
    } catch (err) {
      console.error('Erreur lors de la suppression de la mati√®re:', err);
      toast({
        title: "Erreur lors de la suppression",
        description: err instanceof Error ? err.message : "Une erreur est survenue lors de la suppression.",
        variant: "destructive",
      });
      return false;
    }
  };

  useEffect(() => {
    void fetchSubjects();
  }, [userProfile?.schoolId, classId, teacherId]);

  return {
    subjects,
    loading,
    error,
    createSubject,
    updateSubject,
    deleteSubject,
    refreshSubjects: fetchSubjects
  };
};


